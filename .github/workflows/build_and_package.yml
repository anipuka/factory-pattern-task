name: Build and Package

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Clean workspace
      run: rm -rf build && mkdir -p build
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev googletest
        
    - name: Build Google Test
      run: |
        cd /usr/src/googletest
        sudo cmake .
        sudo make
        sudo cp lib/*.a /usr/lib
        
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release --fresh
        
    - name: Build project
      run: |
        cd build
        cmake --build . --config Release --parallel 2
        
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
        
    - name: Generate DEB package
      run: |
        cd build
        cpack -G DEB
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: factory-pattern-deb
        path: build/*.deb
        
    - name: Create Tag
      id: create-tag
      run: |
        TAG_NAME="nightly-$(date -u +'%Y%m%d-%H%M%S')"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git tag -a "$TAG_NAME" -m "Nightly build $TAG_NAME"
        git push origin "$TAG_NAME"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.create-tag.outputs.TAG_NAME }}
        name: "Nightly Build ${{ steps.create-tag.outputs.TAG_NAME }}"
        body: |
          Automatic nightly build
          Commit: ${{ github.sha }}
          Workflow: ${{ github.run_id }}
        draft: false
        prerelease: true
        files: |
          build/*.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
